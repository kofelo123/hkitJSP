/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.36
 * Generated at: 2017-08-02 05:02:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import java.util.*;

public final class freeboard_005flist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>게시판</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<p>\r\n");
      out.write("<p align=\"center\"><font color=\"#0000ff\" face=\"굴림\" size=\"3\"><string>자유 게시판</string></font>\r\n");
      out.write("<p>\r\n");
      out.write("<center>\r\n");
      out.write("\t<table border=\"0\"  width=\"600\" cellpadding=\"4\" cellspacing=\"0\">\r\n");
      out.write("\t\t<tr align=\"center\">\r\n");
      out.write("\t\t\t<td colspan=\"5\" height=\"1\" bgcolor=\"#1F4F8F\"></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr align=\"center\" bgcolor=\"#87E8FF\">\r\n");
      out.write("\t\t\t<td width=\"42\" bgcolor=\"#DFEDFF\"><font size=\"2\">번호</font></td>\r\n");
      out.write("\t\t\t<td width=\"340\" bgcolor=\"#DFEDFF\"><font size=\"2\">제목</font></td>\r\n");
      out.write("\t\t\t<td width=\"84\" bgcolor=\"#DFEDFF\"><font size=\"2\">등록자</font></td>\r\n");
      out.write("\t\t\t<td width=\"78\" bgcolor=\"#DFEDFF\"><font size=\"2\">날짜</font></td>\r\n");
      out.write("\t\t\t<td width=\"49\" bgcolor=\"#DFEDFF\"><font size=\"2\">조회</font></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr align=\"center\">\r\n");
      out.write("\t\t\t<td colspan=\"5\" bgcolor=\"#1F4F8F\" height=\"1\"></td>\r\n");
      out.write("\t\t</tr>\r\n");

	Vector name = new Vector();
	Vector inputdate = new Vector();
	Vector email = new Vector();
	Vector subject = new Vector();
	Vector rcount = new Vector();
	Vector keyid=new Vector();
	
	int where = 1;
	
	int totalgroup=0;
	int maxpages=2;
	int startpage=1;
	int endpage=startpage+maxpages-1;
	int wheregroup=1;
	
	if(request.getParameter("go") != null){
		where = Integer.parseInt(request.getParameter("go"));
		wheregroup = (where-1)/maxpages + 1;
		startpage=(wheregroup-1) * maxpages+1;
		endpage=startpage+maxpages-1;
	}else if (request.getParameter("gogroup") != null){
		wheregroup = Integer.parseInt(request.getParameter("gogroup"));
		startpage=(wheregroup-1) * maxpages+1;
		where = startpage;
		endpage=startpage+maxpages-1;
	}
	int nextgroup=wheregroup+1;
	int priorgroup = wheregroup-1;
	
	int nextpage=where+1;
	int priorpage = where-1;
	int startrow=0;
	int endrow=0;
	int maxrows=2;
	int totalrows=0;
	int totalpages =0;
	
	int id=0;
	
	String em=null;
	Connection con = null;
	PreparedStatement pstmt = null;
	ResultSet rs= null;
	
	try{
		Class.forName("com.mysql.jdbc.Driver");
	}catch(ClassNotFoundException e){
		e.printStackTrace();
	}
	
	try{
		con = DriverManager.getConnection("jdbc:mysql://localhost:3306/member","hkitJeongwon","gj0123");
	}catch(SQLException e){
		e.printStackTrace();
	}
	
	try{
		String sql="select * from freeboard order by id desc";
		pstmt = con.prepareStatement(sql);
		rs=pstmt.executeQuery();
		if(!(rs.next())){
			out.println("게시판에 올린 글이 없습니다.");
		}else{
			do{
				keyid.addElement(new Integer(rs.getInt("id")));
				name.addElement(rs.getString("name"));
				email.addElement(rs.getString("email"));
				String idate = rs.getString("inputdate");
				idate = idate.substring(0,8);
				inputdate.addElement(idate);
				subject.addElement(rs.getString("subject"));
				rcount.addElement(new Integer(rs.getInt("readcount")));
			}while(rs.next());
			totalrows = name.size();
			totalpages = (totalrows-1)/maxrows +1;
			startrow = (where-1) * maxrows;
			endrow = startrow+maxrows-1;
			if( endrow >= totalrows)
				endrow=totalrows-1;
			
			totalgroup = (totalpages-1)/maxpages +1;
			if(endpage > totalpages)
				endpage=totalpages;
			
			for(int j=startrow;j<=endrow;j++){
				String temp=(String)email.elementAt(j);
				if((temp == null) || (temp.equals("")))
					em = (String)name.elementAt(j);
				else
					em = "<a href=mailto:" + temp + ">" + name.elementAt(j) + "</a>";
					
					id= totalrows-j;
					if(j%2 == 0){
						out.println("<tr bgcolor='#FFFFFF' onMouseOver=\" bgColor='#DFEDFF'\" onMouseOut=\"bgColor='\">");
					}else{
						out.println("<tr bgcolor='#F4F4F4' onMouseOver=\" bgColor='#DFEDFF'\" onMouseOut=\"bgColor='#F4F4F4'\">");
					}
					out.println("<td align='center'>");
					out.println(id+"</td>");
					out.println("<td>");
					String clink = "<a href=freeboard_read.jsp?id=" + keyid.elementAt(j);
					clink = clink + "&page=" + where + ">" + subject.elementAt(j)+ "</a>";
					out.println(clink+ "</td>");
					out.println("<td align='center'>");
					out.println(em + "</td>");
					out.println("<td align='center'>");
					out.println(inputdate.elementAt(j)+ "</td>");
					out.println("<td align='center'>");
					out.println(rcount.elementAt(j)+ ","+"</td>");
					out.println("</tr>");
					
			}
			rs.close();
		}
		out.println("</table>");
		pstmt.close();
		con.close();
	}catch(java.sql.SQLException e){
		out.println(e);
	}
	
	if(wheregroup >1) {
		out.println("[<a href='freeboard_list.jsp?gogroup=1'>처음</a>]");
		out.println("[<a href=freeboard_list.jsp?gogroup="+priorgroup +">이전</a>]");
	}else{
		out.println("[처음]");
		out.println("[이전]");
	}
	if(name.size() !=0){
		for(int jj=startpage; jj<=endpage; jj++){
			if(jj==where)
				out.println("["+jj+"]");
			else
				out.println("[<a href=freeboard_list.jsp?go="+jj+">" + jj + "</a>]");
		}
	}
	
	if( wheregroup < totalgroup){
		out.println("[<a href=freeboard_list.jsp?gogroup=" + nextgroup + ">다음</a>]");
		out.println("[<a href=freeboard_list.jsp?gogroup=" + totalgroup + ">마지막</a>]");
	}else {
		out.println("[다음]");
		out.println("[마지막]");
	}
	out.println("전체 글수 : " +totalrows);

      out.write("\r\n");
      out.write("\t<table border=\"0\" width=\"600\" cellpadding=\"0\" cellspacing=\"0\">\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td align=\"right\" valign=\"bottom\">\r\n");
      out.write("\t\t\t<a href=\"freeboard_write.html\"><img src=\"image/write.gif\" width=\"66\" height=\"21\" border=\"0\"></a>\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t</table>\r\n");
      out.write("\t\t\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
